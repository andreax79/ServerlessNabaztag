//--------------------------------------------------------------------------------------------------
// HTTP Server
//--------------------------------------------------------------------------------------------------

type Sock=[sockCnx sockInput sockSize sockOutput sockIndex sockCloseAfter sockCallback];;

var http_header="HTTP/1.0 200 OK\13\10Server: MTL HTTP server\13\10Content-Type: text/html\13\10\13\10";;

var http_sep="\13\n\13\n";;	// sÈparateur entre l'en-tÍte et le corps de la rÈponse ‡ une requÍte
var http_content_start="ontent-Length: ";;
var http_content_start2="ontent-length: ";;
var http_content_end="\13\n";;
proto get_next_surprise;;

fun httpgetheader res =
	let strstr res http_sep 0 -> i in
	if i!=nil then strsub res 0 i;;

fun findsize s=
	let httpgetheader s -> header in
	if header!=nil then
	let strstr header http_content_start 0 -> i in
	let if i!=nil then i else strstr header http_content_start2 0 -> i in
	let if i!=nil then strstr header http_content_end i -> j in
	(strlen header)+(strlen http_sep)+if i!=nil then
		let i+strlen http_content_start -> i in atoi strsub header i if j!=nil then j-i;;

fun tcpwrite cnx sock=
Secholn "tcpwrite";
	if sock.sockOutput!=nil then
	(	
		if sock.sockIndex==nil then set sock.sockIndex=0;
		Iecholn set sock.sockIndex=writetcp cnx sock.sockOutput Iecholn sock.sockIndex;
		if sock.sockIndex!=nil && sock.sockIndex>=strlen sock.sockOutput then
		(	set sock.sockIndex=nil;
			set sock.sockOutput=nil;
			if sock.sockCloseAfter==1 then closetcp sock.sockCnx
		)
	);
	0;;

fun tcpsend sock s =
	set sock.sockOutput=strcat sock.sockOutput s;
	tcpwrite sock.sockCnx sock;;

fun tcpcloseafter sock =
	set sock.sockCloseAfter=1;
	if sock.sockIndex>=strlen sock.sockOutput then closetcp sock.sockCnx
	;;

fun tcpread cnx input sock=
Secho "u";// Secholn input;
	if input==nil ||0==strlen input then
	(	closetcp cnx;
		nil	)
	else
	(
		if sock.sockSize==nil then
		(
			set sock.sockInput=(strcat hd sock.sockInput input)::nil;
			Secho "size=";Iecholn set sock.sockSize=findsize hd sock.sockInput;
			nil
		)
		else set sock.sockInput=input::sock.sockInput;
		if sock.sockSize!=nil && (slistlen sock.sockInput)>=sock.sockSize then
		let strcatlist rev sock.sockInput nil -> str in
		(
			set sock.sockInput=nil;
			let call sock.sockCallback [str] -> res in
			(
				tcpsend sock strcat http_header res;
				tcpcloseafter sock
			)
		)
	);
	0;;

fun tcpevent t val msg sock=
	if val==TCPWRITE then tcpwrite t sock
	else if val==TCPCLOSE then tcpread t nil sock
	else tcpread t msg sock;;

fun cbsrv cnx code msg cbrequest=
	Secholn "httpsrv accept";
	let [sockCnx:cnx sockCallback:cbrequest]-> sock in
	(
		tcpcb cnx fixarg4 #tcpevent sock;
		0
	);;

fun starthttpsrv port cbrequest=
	listentcp port fixarg4 #cbsrv cbrequest;
	Secholn "starthttpsrv";
	0;;

//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------

var page_test=
"<html><head><title>Nabaztag</title>
<style type=\"text/css\">
<!--
body {
	font-family: Arial, Helvetica, sans-serif;
	margin: 10px;
	font-size: 11px;
}
-->
</style>
</head>
<body>
  <h1>Nabaztag</h1>

<div style='width:200px;float:left;'>
  <h2>Util</h2>
  <ul>
  <li><a href='/'>reload page</a></li>
  <li><a href='/surprise'>surprise</a></li>
  <li><a href='/stop'>stop everything</a></li>
  <li><a href='/clear'>info off</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Sleep</h2>
  <ul>
  <li><a href='/sleep'>sleep</a></li>
  <li><a href='/wakeup'>wake up</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>System</h2>
  <ul>
  <li><a href='/gettime'>update time from timeserver</a></li>
  <li><a href='/reboot'>reboot</a></li>
  </ul>
</div>

<br style='clear:both;'/>

<div style='width:200px;float:left;'>
  <h2>Play sound</h2>
  <ul>
  <li><a href='/communication'>communication</a></li>
  <li><a href='/ack'>ack</a></li>
  <li><a href='/abort'>abort</a></li>
  <li><a href='/ministop'>ministop</a></li>
  <li><form action='/play' method='GET'><input type='text' name='u'/><input type='submit' value='Play URI'/></form></li>
  <li><form action='/say' method='GET'><input type='text' name='t'/><input type='submit' value='Say text'/></form></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Taichi</h2>
  <ul>
  <li><a href='/taichi?v=1000'>do taichi now</a></li>
  <li><a href='/taichi?v=0'>taichi off</a></li>
  <li><a href='/taichi?v=40'>taichi min</a></li>
  <li><a href='/taichi?v=80'>taichi medium</a></li>
  <li><a href='/taichi?v=255'>taichi max</a></li>
  </ul>
</div>
<div style='width:400px;float:left;'>
  <h2>Ears</h2>
  <ul>
  <li><b>left</b> position:
  <a href='/left?p=0&d=0'>0</a>
  <a href='/left?p=1&d=0'>1</a>
  <a href='/left?p=2&d=0'>2</a>
  <a href='/left?p=3&d=0'>3</a>
  <a href='/left?p=4&d=0'>4</a>
  <a href='/left?p=5&d=0'>5</a>
  <a href='/left?p=6&d=0'>6</a>
  <a href='/left?p=7&d=0'>7</a>
  <a href='/left?p=8&d=0'>8</a>
  <a href='/left?p=9&d=0'>9</a>
  <a href='/left?p=10&d=0'>10</a>
  <a href='/left?p=11&d=0'>11</a>
  <a href='/left?p=12&d=0'>12</a>
  <a href='/left?p=13&d=0'>13</a>
  <a href='/left?p=14&d=0'>14</a>
  <a href='/left?p=15&d=0'>15</a>
  <a href='/left?p=16&d=0'>16</a></li>
  <li><b>right</b> position:
  <a href='/right?p=0&d=0'>0</a>
  <a href='/right?p=1&d=0'>1</a>
  <a href='/right?p=2&d=0'>2</a>
  <a href='/right?p=3&d=0'>3</a>
  <a href='/right?p=4&d=0'>4</a>
  <a href='/right?p=5&d=0'>5</a>
  <a href='/right?p=6&d=0'>6</a>
  <a href='/right?p=7&d=0'>7</a>
  <a href='/right?p=8&d=0'>8</a>
  <a href='/right?p=9&d=0'>9</a>
  <a href='/right?p=10&d=0'>10</a>
  <a href='/right?p=11&d=0'>11</a>
  <a href='/right?p=12&d=0'>12</a>
  <a href='/right?p=13&d=0'>13</a>
  <a href='/right?p=14&d=0'>14</a>
  <a href='/right?p=15&d=0'>15</a>
  <a href='/right?p=16&d=0'>16</a></li>  
  </ul>
</div>

<br style='clear:both;'/>

<div style='width:200px;float:left;'>
  <h2>Nose</h2>
  <ul>
  <li><a href='/nose?v=0'>off</a></li>
  <li><a href='/nose?v=1'>on</a></li>
  <li><a href='/nose?v=2'>todo</a></li>
  <li><a href='/nose?v=3'>urgent</a></li>
  <li><a href='/nose?v=4'>panic</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Weather</h2>
  <ul>
  <li><a href='/weather?v=0'>sun</a></li>
  <li><a href='/weather?v=1'>clouds</a></li>
  <li><a href='/weather?v=2'>fog</a></li>
  <li><a href='/weather?v=3'>rain</a></li>
  <li><a href='/weather?v=4'>snow</a></li>
  <li><a href='/weather?v=5'>storm</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Stock</h2>
  <ul>
  <li><a href='/stock?v=0'>---</a></li>
  <li><a href='/stock?v=1'>--</a></li>
  <li><a href='/stock?v=2'>-</a></li>
  <li><a href='/stock?v=3'>0</a></li>
  <li><a href='/stock?v=4'>+</a></li>
  <li><a href='/stock?v=5'>++</a></li>
  <li><a href='/stock?v=6'>+++</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Traffic</h2>
  <ul>
  <li><a href='/traffic?v=0'>free</a></li>
  <li><a href='/traffic?v=1'>okay</a></li>
  <li><a href='/traffic?v=2'>moderate</a></li>
  <li><a href='/traffic?v=3'>normal</a></li>
  <li><a href='/traffic?v=4'>heavy</a></li>
  <li><a href='/traffic?v=5'>congested</a></li>
  <li><a href='/traffic?v=6'>extreme</a></li>
  </ul>
</div>
<div style='width:200px;float:left;'>
  <h2>Pollution</h2>
  <ul>
  <li><a href='/pollution?v=0'>0</a></li>
  <li><a href='/pollution?v=1'>1</a></li>
  <li><a href='/pollution?v=2'>2</a></li>
  <li><a href='/pollution?v=3'>3</a></li>
  <li><a href='/pollution?v=4'>4</a></li>
  <li><a href='/pollution?v=5'>5</a></li>
  <li><a href='/pollution?v=6'>6</a></li>
  <li><a href='/pollution?v=7'>7</a></li>
  <li><a href='/pollution?v=8'>8</a></li>
  <li><a href='/pollution?v=9'>9</a></li>
  <li><a href='/pollution?v=10'>10</a></li>
  </ul>
</div>

<hr style='clear:both;'/>
    
  mac: "::"<MAC>"::" <br/>
  time: "::"<HOURS>"::":"::"<MINUTES>"::":"::"<SECONDS>"::" <br/>
  bunny time: "::"<TTIME>"::" <br/>
  next surprise: "::"<SURPRISE>"::" <br/>
  taichi freq: "::"<TAICHI>"::" <br/>
  left: "::"<LEFT>"::" <br/>
  right: "::"<RIGHT>"::" <br/>
  language: "::"<LANG>"::" <br/>
  time offset: "::"<TIMEOFFSET>"::" min <br/>
  wakeup: "::"<WAKEUP>"::" <br/>
  sleep: "::"<SLEEP>"::" <br/>
  server url: http://"::"<SERVER>"::"

  <hr/>

  <h2>Language Setup</h2>
  <ul>
  <li><a href='/lang?v=uk'>english</a></li>
  <li><a href='/lang?v=it'>italian</a></li>
  <li><a href='/lang?v=fr'>french</a></li>
  <li><a href='/lang?v=es'>spanish</a></li>
  </ul>

  <h2>Timezone Setup</h2>
  <form action='/time'>
  <select name='v' onchange='this.form.submit();'>
      <option value='' selected='selected' disabled='disabled'></option>
      <option value='-720'>GMT -12:00</option>
      <option value='-660'>GMT -11:00</option>
      <option value='-600'>GMT -10:00</option>
      <option value='-540'>GMT -9:00</option>
      <option value='-480'>GMT -8:00</option>
      <option value='-420'>GMT -7:00</option>
      <option value='-360'>GMT -6:00</option>
      <option value='-300'>GMT -5:00</option>
      <option value='-240'>GMT -4:00</option>
      <option value='-210'>GMT -3:30</option>
      <option value='-180'>GMT -3:00</option>
      <option value='-120'>GMT -2:00</option>
      <option value='-60'>GMT -1:00</option>
      <option value='0'>GMT</option>
      <option value='60'>GMT +1:00</option>
      <option value='120'>GMT +2:00</option>
      <option value='180'>GMT +3:00</option>
      <option value='210'>GMT +3:30</option>
      <option value='240'>GMT +4:00</option>
      <option value='270'>GMT +4:30</option>
      <option value='300'>GMT +5:00</option>
      <option value='330'>GMT +5:30</option>
      <option value='345'>GMT +5:45</option>
      <option value='260'>GMT +6:00</option>
      <option value='420'>GMT +7:00</option>
      <option value='480'>GMT +8:00</option>
      <option value='540'>GMT +9:00</option>
      <option value='570'>GMT +9:30</option>
      <option value='600'>GMT +10:00</option>
      <option value='660'>GMT +11:00</option>
      <option value='720'>GMT +12:00</option>
  </select>
  </form>

</body></html>"::nil;;

fun listreplacestr l key val=
	if l!=nil then if !strcmp hd l key then val::listreplacestr tl l key val else (hd l)::listreplacestr tl l key val;;

fun pagefill l p=
	if l==nil then p
	else let hd l ->[key val] in pagefill tl l listreplacestr p key val;;

fun httptest=
	let webmac netMac -> mac in
	let itoa current_time_hours -> current_time_hours_string in
	let itoa current_time_minutes -> current_time_minutes_string in
	let itoa current_time_seconds -> current_time_seconds_string in
	let itoa time -> ttime_string in
	let itoa infotaichi -> infotaichi_string in
	let itoa extleft -> extleft_string in
	let itoa extright -> extright_string in
    let itoa get_time_offset -> ttime_offset in

	strcatlist pagefill
			["<MAC>" mac]::
			["<HOURS>" current_time_hours_string]::
			["<MINUTES>" current_time_minutes_string]::
			["<SECONDS>" current_time_seconds_string]::
			["<TTIME>" ttime_string]::
			["<SURPRISE>" itoa get_next_surprise]::
			["<TAICHI>" infotaichi_string]::
			["<LEFT>" extleft_string]::
			["<RIGHT>" extright_string]::
			["<SERVER>" confGetServerUrl]::
			["<LANG>" get_language]::
			["<TIMEOFFSET>" ttime_offset]::
			["<WAKEUP>" "8"]::
			["<SLEEP>" "23"]::
			nil
		page_test
	;;

//--------------------------------------------------------------------------------------------------

proto taichistart 0;;
proto startSleep 0;;
proto endSleep 0;;
proto stopEverythingAndResetToIdle 0;;
proto get_time_from_timeserver 0;;
proto wavstarthttp 2;;
proto surprise 0;;
proto _cbWavError 0;;
proto _infosrc_update 2;;

//--------------------------------------------------------------------------------------------------

fun unknownCommand=
	wavstarthttp strcatlist "http://"::confGetServerUrl::"/config/reco/"::get_language::"/Comprend"::(itoa 0 + random 4)::".mp3"::nil #_cbWavError;;

fun filterplus s=
	let strlen s -> n in
	for i=0;i<n do if (strget s i)=='+' then strset s i 32;
	s;;

fun filterpercent s i0=
	let strstr s "%" i0 -> i in
	if i==nil then (strsub s i0 nil)::nil
	else (strsub s i0 i-i0)::(ctoa htoi strsub s i+1 2)::(filterpercent s i+3);;

fun extractargs uri i=
	let strstr uri "=" i-> j in
	if j!=nil then let strstr uri "&" j-> k in
	let if k==nil then strlen uri else k -> k in
	[(strget uri i) strcatlist filterpercent filterplus strsub uri j+1 k-j-1 0]::extractargs uri k+1;;

fun extractpage uri=
	strsub uri 1 nil;;
	
fun uriextract uri =
	let strstr uri "?" 0 -> i in
	if i==nil then [extractpage uri nil]
	else [extractpage strsub uri 0 i extractargs uri i+1];;

var _Sargvalue;;
var _Iargvalue;;

// get a string value from the args by the key
fun Sgetargvalue args key =
	set _Sargvalue = "";
	for l=args; l!=nil; tl l do let hd l->[n v] in
	(	
		if n==key then (set _Sargvalue=v)
	);
	_Sargvalue
	;;

// get an integer value from the args by the key
fun Igetargvalue args key =
	set _Iargvalue = 0;
	for l=args; l!=nil; tl l do let hd l->[n v] in
	(	
		if n==key then (set _Iargvalue=atoi v)
	);
	_Iargvalue
	;;

fun cbhttp req=
	let strstr req " " 0 -> i in
	let strstr req " " i+1 -> j in
	let strsub req i+1 j-i-1 -> uri in
	let uriextract uri -> [page args] in
	(
		Secho "uri : "; Secholn uri; 
		//Secho "page : "; Secholn page;

		// misc
		if !strcmp page "gettime" then (get_time_from_timeserver; httptest)		
		else if !strcmp page "stop" then (stopEverythingAndResetToIdle;  httptest) // stop everything we can be doing and resets to either idle or asleep
		else if !strcmp page "reboot" then (reboot 0x0407FE58 0x13fb6754; nil)
		else if !strcmp page "surprise" then (if !gSleepState then (surprise; httptest))

		// play sound
		else if !strcmp page "communication" then (if !gSleepState then (controlsound midi_communion; httptest))
		else if !strcmp page "ack" then (if !gSleepState then (controlsound midi_ack; httptest))
		else if !strcmp page "abort" then (if !gSleepState then (controlsound midi_abort; httptest))
		else if !strcmp page "ministop" then (controlsound midi_ministop; httptest)
		else if !strcmp page "play" then (if !gSleepState then (wavstarthttp Sgetargvalue args 'u' #_cbWavError; httptest))
		//else if !strcmp page "say" then (if !gSleepState then (wavstarthttp (strcatlist "http://translate.google.com/translate_tts?tl=en_gb&q="::(strreplace (Sgetargvalue args 't') " " //"+")::nil) #_cbWavError; httptest))
    else if !strcmp page "say" then (if !gSleepState then (wavstarthttp (strcatlist "http://translate.google.com.vn/translate_tts?ie=UTF-8&tl=nl&client=tw-ob&q="::(strreplace (Sgetargvalue args 't') " " "+")::nil) #_cbWavError; httptest))

		
		else if !strcmp page "taichi" then let Igetargvalue args 'v' -> v in (
			if v == 1000 && !gSleepState then
				taichistart
			else
				set infotaichi = v;
			httptest
		) // taichi

		else if !strcmp page "mp3" then (wavstarthttp Sgetargvalue args 'v' #_cbWavError; httptest)

		else if !strcmp page "sleep" then (startSleep; httptest) // sleep
		else if !strcmp page "wakeup" then (endSleep; httptest) // wake up
		else if !strcmp page "left" then (if !gSleepState then (earGo 0 Igetargvalue args 'p' Igetargvalue args 'd'; httptest)) // p=position d=direction
		else if !strcmp page "right" then (if !gSleepState then (earGo 1 Igetargvalue args 'p' Igetargvalue args 'd'; httptest)) // p=position d=direction

		else if !strcmp page "nose" then (set infomessages = Igetargvalue args 'v'; httptest) // v (0-1)
		else if !strcmp page "weather" then (if !gSleepState then (_infosrc_update 1 Igetargvalue args 'v'; httptest)) // weather (0-5)
		else if !strcmp page "stock" then (if !gSleepState then (_infosrc_update 2 Igetargvalue args 'v'; httptest)) // stock market (0-6)
		else if !strcmp page "traffic" then (if !gSleepState then (_infosrc_update 3 Igetargvalue args 'v'; httptest)) // trafic (0-6)
		else if !strcmp page "mail" then (if !gSleepState then (_infosrc_update 6 Igetargvalue args 'v'; httptest)) // mail (0-4)
		else if !strcmp page "pollution" then (if !gSleepState then (_infosrc_update 7 Igetargvalue args 'v'; httptest)) // pollutions (0-10)
		else if !strcmp page "clear" then (for i=1;i<=8 do (_infosrc_update 0 i); httptest)
		// language setup
		else if !strcmp page "lang" then (set_language Sgetargvalue args 'v'; httptest)
		// time setup
		else if !strcmp page "time" then (set_time_offset atoi Sgetargvalue args 'v'; httptest)
				
		else if !strcmp page "" then (httptest)
		
		else (unknownCommand; httptest)
	);;


fun cbtime req=
	"ciao\13\n" ;;

fun tcptimeread cnx input sock=
	set sock.sockInput=nil;
	let call sock.sockCallback [ "" ] -> res in
	(
		tcpsend sock res;
		tcpcloseafter sock
	);
	0;;

fun cbtimesrv cnx code msg =
	let [sockCnx:cnx sockCallback:#cbtime]-> sock in
	(
		tcptimeread cnx nil sock;
		0
	);;

fun start_time_server port=
	listentcp port #cbtimesrv;
	0;;




fun startwebserver port =
/*
	let uriextract "/123?a=ciccio&b=2" -> [page args] in
	let Sgetargvalue args 'a' -> a in
	let Igetargvalue args 'b' -> b in
	(
		Secho "++++++++++++page : "; Iecholn page;
		//for l=args;l!=nil;tl l do let hd l->[n v] in
		//	(Iecho n; Secho ":";Secho v;Secholn "<");
		//Secholn getargvalue args 97;
		Secholn a;
		Iecholn Igetargvalue args 'x';
		starthttpsrv port #cbhttp
	)
	;;
*/
	start_time_server 2000;
	starthttpsrv port #cbhttp;;









