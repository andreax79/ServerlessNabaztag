#include protos/net_protos.mtl
#include protos/icmp_protos.mtl
#include protos/tcp_protos.mtl
#include protos/udp_protos.mtl
#include protos/arp_protos.mtl
#include protos/dns_protos.mtl

#include ipv4/arp.mtl
#include ipv4/udp.mtl
#include ipv4/tcp.mtl
#include ipv4/udp.mtl

// make sure the tcpudp emulation stuff gets loaded after the "real" code to override it all
#ifdef SIMU
#include ipv4/tcpudp_emu.mtl
#endif

proto cbnetarp 2 ;;

const IP_PROTO  = 0;;
const ARP_PROTO = 6;;

const SOL_IP    = 0;;
const SOL_ICMP  = 1;;
const SOL_TCP   = 6;;
const SOL_UDP   = 17;;

fun net src mac=
	let strget src 7 -> p in
	(
		if p==ARP_PROTO then cbnetarp src mac // ARP
		else if p==IP_PROTO then // IP
			let strget src 17 -> ip in
			if ip==SOL_TCP then cbnettcp src mac
			else if ip==SOL_UDP then cbnetudp src mac // UDP
			else if ip==SOL_ICMP then icmp_handler src mac;  // ICMP
		0
	);
	0;;

fun netstart=
#ifdef SIMU
	tcpCb #nettcp;
	udpCb #netudp;
	set ltcp=nil;
	set ludp=nil;
	dns_add_new_srv "\192\168\1\1" 1;
	set netip="\127\0\0\1";
#else
	netCb #net;
	resetarp;
	resettcp;
	resetudp;
#endif
	0;;

fun nettime=
#ifndef SIMU
	arptime;
	tcptime;
#endif
	0;;

/**
 * Return network status as JSON
 */
fun net_json=
    strcatlist
        "{\n"::
            (json_str "ip" webip netip) :: ",\n" ::
            (json_str "mask" webip netmask) :: ",\n" ::
            (json_str "gateway" webip netgateway) :: ",\n" ::
            (json_obj "dns" dns_list_to_json) :: "\n" ::
        "}" :: nil
;;

#include ipv4/icmp.mtl
#include ipv4/tcp.mtl
#include ipv4/udp.mtl
#include ipv4/arp.mtl
