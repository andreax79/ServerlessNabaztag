#include protos/net_protos.mtl
#include protos/icmp_protos.mtl
#include protos/tcp_protos.mtl
#include protos/udp_protos.mtl
#include protos/arp_protos.mtl
#include protos/dns_protos.mtl
#include protos/dhcp_protos.mtl

#include ipv4/ipv4.mtl

const IP_PROTO  = 0;;
const ARP_PROTO = 6;;

const SOL_IP    = 0;;
const SOL_ICMP  = 1;;
const SOL_TCP   = 6;;
const SOL_UDP   = 17;;

fun net src mac=
	let strget src 7 -> p in
	(
		if p==ARP_PROTO then arp_handler src mac // ARP
		else if p==IP_PROTO then // IP
			let strget src 17 -> ip in
			if ip==SOL_TCP then tcp_handler src mac // TCP
			else if ip==SOL_UDP then udp_handler src mac // UDP
			else if ip==SOL_ICMP then icmp_handler src mac;  // ICMP
		0
	);
	0;;

/**
 * Initialize the network stack
 */
fun net_start=
#ifdef SIMU
	tcpCb #nettcp;
	udpCb #netudp;
	dns_add_new_srv "\192\168\1\1" 1;
	set netip="\127\0\0\1";
#else
	netCb #net;
#endif
    // ARP init
    arp_init;
    // TCP init
    tcp_init;
    // UDP init
    udp_init;
#ifdef SERVERLESS
    // Initialize periodic sending of ICMP ping
    icmp_ping_init;
#endif
    // Start DNS client
    dns_client_init;
#ifndef SIMU
    // Start DHCP client
    dhcp_start_client;
#endif
	0;;

/**
 * Return network status as JSON
 */
fun net_json=
    strcatlist
        "{\n"::
            (json_str "ip" ip_to_str netip) :: ",\n" ::
            (json_str "mask" ip_to_str netmask) :: ",\n" ::
            (json_str "gateway" ip_to_str netgateway) :: ",\n" ::
            (json_obj "dns" dns_list_to_json) :: "\n" ::
        "}" :: nil
;;

#include net/dhcp.mtl
#include net/dns.mtl
#include net/http.mtl
#include net/sock.mtl
#include net/wifi.mtl
