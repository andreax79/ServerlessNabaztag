#include protos/trame_protos.mtl
#include protos/hooks_protos.mtl
#include protos/chor_protos.mtl

// ********** RFID **********************
// v19 Amélioration de la lecteure RFID
// v19 Les fonction _rfid_parse servent à tester les caractères de l'identifiant RFID

var _rfid_last;;
var _rfid_char = 2;; // v19
var _rid_int = 6;;  // v19
var _rfid_last_time = 0;; // v19

fun _cbrfidhttp http res=
	Secholn "Recv rfid:"; Secho res;
	set chor_processing_status = 0;
	let httpgetcontent res -> ping_trame in
		trame_eval ping_trame;
	0;;

fun _rfid_dump l0=
	for l=l0;l!=nil;tl l do let hd l->x in Secholn webmac x;
	l0;;

fun _rfid_parse_char id index= // v19
	set _rfid_char = strget id index;
	_rfid_char;;

fun _rfid_parse id = // v19
	set _rid_int = 6;
	for i=0;i<6 do ( if(_rfid_parse_char id i) == 0 then set _rid_int = _rid_int - 1);
	_rid_int;;

fun _rfid_end_chor unused=
	// continue idle
	run_set_state idleRun;
	0
	;;

/**
 * Controls if a stamp is shown to the rabbit.
 * Does not control wether we _should_ control or not (according to the interactive state, ...)
 * Returns the rfid or nil.
*/
fun _rfid_check_presence=
	let rfidGet -> rfid in
	if (strcmp rfid _rfid_last) && (time_ms - _rfid_last_time > 750) then
		rfid
	else
		nil
;;

fun rfid_control=
	if ((time_ms - _rfid_last_time) > 1000) then
	(
		set _rfid_last = "0000000"
	);
	let _rfid_check_presence -> rfid in
	if rfid!=nil then
	(
		if (_rfid_parse rfid) !=0 then
		(
			set _rfid_last=rfid;
			set _rfid_last_time = time_ms;
			midi_play midi_RFIDok;

			// lancer l'animation (v19)
			chor_start_msg CHOR_RFID_OK::nil #_rfid_end_chor nil;

			hook_rfid rfid
		)
	);
	0;;

