#include protos/jobs_protos.mtl

// -------------------------------------------------------------------------------------------------
// ICMP
// -------------------------------------------------------------------------------------------------

//  -----IP-----
//  TCP
//    0   1   2   3    4   5   6   7    8   9   10  11   12  13  14  15   16 17 18 19
//	"\$aa\$aa\$03\$00 \$00\$00\$08\$00 \$45\$00\$00\$00 \$00\$00\$00\$00 \100\6\0\0"::  // 6=TCP
//  UDP
//	"\$aa\$aa\$03\$00 \$00\$00\$08\$00 \$45\$00\$00\$00 \$00\$00\$00\$00 \100\17\0\0":: // 17=DUP
//
// 08        version (4 bit), header length (4 bit)
// 09        dscs (6 bit), ecn (2 bit)
// 10-11     total length
// 12-13     id
// 14-15     flags (4 bit),fragment offset (12 bit)
// 16        time to live
// 17        protocol
// 18-19     header checksum
// 20-23     ip from
// 24-27     ip to
// ICMP
// 28        type
// 29        code
// 30-31     checksum
// 32-35     quench

const ICMP_ECHOREPLY = 0 ;;   // Echo Reply
const ICMP_ECHO = 8 ;;	      // Echo Request
const ICMP_PING_DELAY = 60 * 1000 ;; // Delay between pings (in ms)

fun strputchk s i w=
	strset s i ~(w>>8);
	strset s i+1 ~w;
	0;;

fun mkicmp ipsrc ipdst icmp_type quench content=
	let strcatlist
	"\$aa\$aa\$03\$00\$00\$00\$08\$00\$45\$00\$00\$00\$00\$00\$00\$00\64\1\0\0"::  // 1=ICMP
	ipsrc:: // source ip
	ipdst:: // destination ip
	"\0\0\0\0"::  // type, code
	quench::      // quench (4 byte)
	content::	  // content
	nil -> icmp in
	(
		strputword icmp 10 28+strlen content; // total length
		strset icmp 28 icmp_type;
		strputchk icmp 18 netChk icmp 8 20 0; // ip checksum
		strputchk icmp 30 netChk icmp 28 8+strlen content 0; // icmp checksum
		icmp
	);;

fun icmp_handler src mac=
	let strsub src 36 nil -> content in
	let strsub src 32 4 -> quench in
	let strsub src 20 4 -> ipfrom in
	let strget src 28 -> icmp_type in
	(
		if icmp_type == ICMP_ECHO then ( // ping reply
			// todo: add an hook
			let mkicmp netip ipfrom ICMP_ECHOREPLY quench content -> response in
				netSend response 0 nil mac 0 1;
			0
		);
		0
	);;

fun icmp_ping_job=
    let netgateway -> ipdst in
    let "\0\1\0\1" -> quench in
    let "abcd" -> content in
    let mkicmp netip ipdst ICMP_ECHO quench content -> response in
        netSend response 0 nil netMac 0 1;
    JobRun;;

/**
 * Initialize periodic sending of ICMP ping
 */
fun icmp_ping_init=
    job_start_ex "icmp_ping" ICMP_PING_DELAY #icmp_ping_job;;
