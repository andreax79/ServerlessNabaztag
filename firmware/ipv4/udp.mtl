// -------------------------------------------------------------------------------------------------
// UDP
// -------------------------------------------------------------------------------------------------

fun mkudp ipsrc ipdst portsrc portdst content=
	let strcatlist
	"\$aa\$aa\$03\$00\$00\$00\$08\$00\$45\$00\$00\$00\$00\$00\$00\$00\100\17\0\0"::
	ipsrc::
	ipdst::
	"\0\0\0\0\0\0\0\0"::
	content::
	nil -> udp in
	(
		strputword udp 8+2 28+strlen content;
		strputword udp 8+20 portsrc;
		strputword udp 8+22 portdst;
		strputword udp 8+24 8+strlen content;
		strputchk udp 8+10 netChk udp 8 20 0;
		strputchk udp 8+26 netChk udp 8+20 (8+strlen content) netChk udp 8+24 2 netChk "\0\17" 0 nil netChk udp 8+12 8 0;
		udp
	);;

fun _udp_send2 mac udp=
	netSend udp 0 nil mac 0 1;;

fun udp_send local localp dst dstp content mac=
	let mkudp local dst localp dstp content -> udp in
	if mac!=nil then _udp_send2 mac udp
	else let dst -> ip in	//	ajouter le test de passerelle
	arp_req ip fixarg2 #_udp_send2 udp;;

var ludp;;

fun remudp l port=
	if l!=nil then let hd l ->[p _] in if p==port then remudp tl l port else (hd l)::remudp tl l port;;

fun regudp port cb=
	set ludp=[port cb]::remudp ludp port;;

fun unregudp port=
	set ludp=remudp ludp port;;

fun udp_reset=
    set ludp=nil;;

// UDP handler
fun cbnetudp src mac=
	Secho "<u";
	let Iecholn strgetword src 8+20+2 -> locp in
	let listswitch ludp locp -> cb in
	call cb [strsub src 8+20+8 nil mac strsub src 20 4];;

/**
 * Initialize UDP
 */
fun udp_init=
    udp_reset;;
