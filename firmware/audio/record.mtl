#include protos/interactive_protos.mtl
#include protos/streaming_protos.mtl
#include protos/record_protos.mtl

// **********************
// Record
// **********************

var _record_time_start;;
var _record_mode;;
var _record_retry;;
var _record_play_end;;
var recordreq;;
var recorddata;;
var record_last_wav_bytes = 0;;

fun record_uploading = recordreq!=nil;;

fun record_start_run =
    // wait for the end of the starting sound
    if !audiolib_wav_running then
    (
        led LED_NOSE RGB_RED;
        audiolib_unforce_vol;
        reclib_rec_start;
        set _record_time_start=time_ms;
        run_set_state recordRun
    );
    0;;

fun record_control mode=
    leds_set_all RGB_BLACK;
    audiolib_wav_stop;
    motorset 0 0;
    motorset 1 0;
    audiolib_force_vol 64;
    audiolib_wav_start_local_ex MP3_START_RECORD::nil 100;
    set _record_mode=mode;
    run_set_state recordStartRun;
    0;;

fun _record_cb_http http res=
    // record upload done
    set recorddata=nil;
    set recordreq=nil;
    Secholn res;
    leds_set_all RGB_BLACK;
    if _record_play_end!=nil then
    (
        set _record_play_end=nil;
        audiolib_wav_start_local midi_endrecord::nil
    );
    run_set_state idleRun;
    0;;

fun record_upload_timeout_job=
    if record_uploading then
    (
        if _record_play_end!=nil && ((_record_play_end-time_ms)<0) then
        (
            set _record_play_end=nil;
            audiolib_wav_start_local midi_endrecord::nil
        );
        if (httpinactive recordreq)>STD_NET_TIMEOUT then
        (
            Secholn "##timeout on upload";
            httpabort recordreq;
            set recordreq=nil;
            if _record_retry>0 then
            (
                // retry
                set _record_retry=_record_retry-1;
                if (!interactive_status) then (
                    set recordreq=httprequest "POST" Secholn url_record _record_mode recorddata #_record_cb_http HTTP_NORMAL;0
                ) else (
                    _record_interactive_send_upload
                );
                nil
            )
            else
            (
                // abort
                set recorddata=nil;
                if (!interactive_status) then (
                    run_set_state idleRun;
                    0
                ) else (
                    interactive_error
                )
            )
        )
    );
    JobRun;;


fun record_run=
    if !button2 || ((time_ms-_record_time_start)>RECORD_MAX_RECORDING_TIME)then
    (
        reclib_rec_stop;
        leds_set_all RGB_BLACK;
        let reclib_recriff -> wavfile in
        (
            set recorddata=strcatlist wavfile;
            set _record_retry=3;
            set _record_play_end=time_ms+400;
            if (!interactive_status) then (
                set recordreq=httprequest "POST" Secholn url_record _record_mode recorddata #_record_cb_http HTTP_NORMAL;
                run_set_state idleRun;
                0
            ) else (
                _record_interactive_send_upload
            )
        )
    );
    0;;

fun _record_interactive_send_upload =
    set recordreq = httprequest "POST" (interactive_url_reco interactive_app record_last_wav_bytes streaming_audio_cmd_index) recorddata #interactive_req_cb_http HTTP_NORMAL;
    run_set_state interactiveReqWaitRun recordreq;
    0;;

