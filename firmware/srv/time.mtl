#include utils/timezones.mtl
#include protos/crontab_protos.mtl

//--------------------------------------------------------------------------------------------------
// Time functions
//--------------------------------------------------------------------------------------------------

const TIME_PROTOCOL_PORT = 37 ;;
const TIME_PROTOCOL_EPHEMERAL_PORT = 49152 ;;

var time_server_ip = "\128\138\140\44" ;;
var _last_read_time = 0 ;;  // last value read from the time server
var _last_read_internal_time = nil ;; // internal time (since boot) of the last time read
var _last_update_time_internal_time = -1 ;; // last time (since boot) of execution of update_time_internal
var days_since_2000 = 0;; // number of days since 2000-01-01 (UTC)
var time_of_the_day = 0;; // seconds since midnigjt (UTC)
var local_time_year = 0 ;; // current year
var local_time_month = 0 ;; // current month
var local_time_day = 0 ;; // current day
var local_time_hour = 0 ;; // current hour
var local_time_minute = 0 ;; // current minute
var local_time_second = 0 ;; // current second


// Get Daylight Saving Time offset (in minutes)
fun get_dst_offset=
    if (config_get_dst == 1) then 60 else 0;;

// Get the time offset (in minutes) from the config
fun get_time_offset=
    get_dst_offset + get_offset_from_city_code config_get_city_code;;

// Calculate the local time "time+offset" (time only, not date)
fun get_local_time=
    (time_of_the_day + 86400 + get_time_offset * 60) % 86400;;

// Update the current year, month, day, housrs, minutes, seconds
fun calculate_local_time=
    let get_local_time -> local_time in
    let 4 * (days_since_2000 - 59) + 3 -> ee in
    let (ee % 1461) / 4 -> gg in
    let 5 * gg + 2 -> hh in
    let ((hh % 153) / 5) + 1 -> day in
    let ((hh / 153) + 2) % 12 + 1 -> month in
    let (ee / 1461) + 2000 + ((14 - month) / 12) -> year in
    (
        set local_time_year=year;
        set local_time_month=if (month > 0) then month else 1;
        set local_time_day=if (day > 0) then day else 1;
        set local_time_hour=(local_time / 3600 ) % 24;
        set local_time_minute=local_time / 60 % 60;
        set local_time_second=local_time % 60
    )
    ;;

// Update the time, day, local time and exec the crontab functions
fun time_update_job=
    let time_ms -> now_ms in
    let now_ms / 1000 -> now in
    if now != _last_update_time_internal_time then
        let (_last_read_time + (now - _last_read_internal_time)) % 86400 -> new_time_of_the_day in
        (
            // Iecho now_ms; Secho " ";
            // Secho "update_time_internal now "; Iecho now; Secho " _last_update_time_internal_time: "; Iecholn _last_update_time_internal_time;
            // Set last update
            set _last_update_time_internal_time = now;
            // Update time of the day
            set time_of_the_day = new_time_of_the_day;
            // Change day at midnight
            if (get_local_time == 0) then set days_since_2000 = days_since_2000+1;
            calculate_local_time;
            // only check when initialized
            if (_last_read_internal_time !=nil) then crontab_check
        );
    JobRun;;


// Zero pad a string to length l
fun zeropad s l=
    if ((strlen s) < l) then
        strcat "0" (zeropad s l-1)
        else s
;;

// Return the current time in human readable form
fun current_time_human=
    strcatlist
               (zeropad (itoa local_time_year) 4)::"-"::
               (zeropad (itoa local_time_month) 2)::"-"::
               (zeropad (itoa local_time_day) 2)::" "::
               (zeropad (itoa local_time_hour) 2)::":"::
               (zeropad (itoa local_time_minute) 2)::":"::
               (zeropad (itoa local_time_second) 2)::nil
;;

//--------------------------------------------------------------------------------------------------
// Time Protocol (RFC 868) client
//--------------------------------------------------------------------------------------------------

// Time protocol client - callback function
fun callback_time msg mac ipfrom=
    let time -> now in
    let strgetword msg 0 -> h in
    let strgetword msg 2 -> l in
    let ((h % 675) * 65536 + l) % 86400 -> new_time_of_the_day in   // 675 is 86400 >> 7
    let h * 512 / 675 - 36524 -> new_days_since_2000 in
    (
        Secho "h: "; Iecho h; Secho " l: "; Iecho l; Secho " new_time_of_the_day: "; Iecho new_time_of_the_day; Secho " new_days_since_2000: "; Iecho new_days_since_2000;
        Secholn "";
        // Set last update
        set _last_read_internal_time = now;
        set _last_read_time = new_time_of_the_day;
        // Update time of the day
        set time_of_the_day = new_time_of_the_day;
        set days_since_2000 = new_days_since_2000;
        calculate_local_time;
        Secholn current_time_human
    );
    unregudp TIME_PROTOCOL_EPHEMERAL_PORT;
    0;;

// Get the current time from the time server
fun get_time_from_timeserver=
    udpsend netip TIME_PROTOCOL_EPHEMERAL_PORT time_server_ip TIME_PROTOCOL_PORT "" nil;
    regudp TIME_PROTOCOL_EPHEMERAL_PORT #callback_time;
    0;;
