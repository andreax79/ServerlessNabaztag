#include protos/button_protos.mtl
#include protos/trame_protos.mtl
#include protos/interactive_protos.mtl
#include protos/json_protos.mtl
#include protos/http_protos.mtl
#include protos/midi_protos.mtl
#ifdef XMPP
#include protos/xmpp_protos.mtl
#endif

//--------------------------------------------------------------------------------------------------
// Interactivity
//--------------------------------------------------------------------------------------------------

#ifdef INTERACTIVE_DEBUG
fun _interactive_debug str= Secholn strcatlist "[interactive] " :: str :: nil; nil;;
#endif

type InteractiveSoundsType = intDefaultStart | intDefaultStop | intNone;;
type InteractiveChorType = intchorDefaultStart | intchorDefaultStop | intchorStartNone | intchorStopNone;;

proto _interactive_continue_error_cb 1;;
proto _interactive_continue_start_cb 1;;
proto _interactive_continue_stop_cb 1;;

var _interactive_sounds;;
var _interactive_chors;;
var _interactive_btn_1_snd = "clonk";;
var _interactive_btn_2_snd = "chord";;


// Construction des urls d'interactivitÃ©
fun interactive_url_start application =
    strcatlist (url_interactive application)::"&st=start"::interactive_cookie::nil
    ;;

fun interactive_url_btn application position cmdindex btn =
    strcatlist (url_interactive application)::"&st=btn&pos="::(itoa position)::"&idx="::(itoa cmdindex)::"&btn="::(itoa btn)::interactive_cookie::nil
    ;;

fun interactive_url_done application =
    strcatlist (url_interactive application)::"&st=done"::interactive_cookie::nil
    ;;

fun interactive_url_ear application position cmdindex earg eard =
    strcatlist (url_interactive application)::"&st=ear&pos="::(itoa position)::"&idx="::(itoa cmdindex)::"&el="::(itoa earg)::"&er="::(itoa eard)::interactive_cookie::nil
    ;;

fun interactive_url_reco application position cmdindex =
    strcatlist (url_interactive application)::"&st=reco&pos="::(itoa position)::"&idx="::(itoa cmdindex)::interactive_cookie::nil
    ;;


// Play a start or stop sound
fun _interactive_control_sound Type =
    match Type with
    (intDefaultStart ->   midi_play MIDI_START_INTERACTIVE )|   // On joue le son par defaut
    (intDefaultStop ->    midi_play MIDI_END_INTERACTIVE )|     // On joue le son par defaut
    (intNone ->           nil)|                                 // On ne joue pas de son
#ifdef INTERACTIVE_DEBUG
    (_ ->                 _interactive_debug "No Sound to Play!!"; nil);
#else
    (_ ->                 nil);                                 // Si on a indique un mauvais son, on ne joue rien
#endif
    0
;;

// Play a start or stop chor
fun _interactive_control_chor Type =
    match Type with
    (intchorDefaultStart ->   chor_start_msg CHOR_START_INTERACTIVE::nil #_interactive_continue_start_cb nil )|  // On joue le chor par defaut
    (intchorDefaultStop ->    chor_start_msg CHOR_START_INTERACTIVE::nil #_interactive_continue_stop_cb nil )|   // On joue le chor par defaut
    (intchorStartNone ->      _interactive_continue_start_cb nil )|                                              // On ne joue pas de chor
    (intchorStopNone ->       _interactive_continue_stop_cb nil )|                                               // On ne joue pas de chor
#ifdef INTERACTIVE_DEBUG
    (_ -> _interactive_debug "No Chor to Play!!"; nil );                                                         // Si on a indique un mauvais chor, on ne joue rien
#else
    (_ -> nil );
#endif
    0
;;

/**
 * Initialize interactive mode
 * Set default sounds and chors
 * Start the ear process touched job
 */
fun interactive_init =
    set _interactive_sounds = [intDefaultStart intDefaultStop]; // Default Sounds of InteractiveMode
    set _interactive_chors = [intchorDefaultStart intchorDefaultStop]; // Default Sounds of InteractiveMode
    job_start "ear_process_touched" #interactive_ear_process_touched_job;
    0;;

// Starts interactivity : sets run mode, remember application and request commands
fun interactive_start application=
    set interactive_status = 1;
    set interactive_app = application;
#ifdef XMPP
    if !xmpp_busy_status then XmppSessionRequestResource "itmode";
#endif

    interactive_state_enter;

    // oreilles vers l'avant
    (ears_go 0 3 0; ears_go 1 3 0);

    // jingle
    let _interactive_sounds -> [gSoundStart gSoundStop] in
        _interactive_control_sound gSoundStart;

    // chor de debut
    let _interactive_chors -> [gChorStart gChorStop] in
        _interactive_control_chor gChorStart;

    0;;

fun _interactive_continue_start_cb unused=
    // ask for instructions
    run_set_state interactiveReqWaitRun (http_request "GET" (interactive_url_start interactive_app) nil #interactive_req_cb_http HTTP_NORMAL);
    0;;

fun interactive_error=
    // jingle error
#ifdef INTERACTIVE_DEBUG
    _interactive_debug "interactive_error";
#endif
    chor_start_msg CHOR_INTERACTIVE_ERROR::nil #_interactive_continue_error_cb nil;
    0;;

fun _interactive_continue_error_cb unused=
    interactive_stop;
    0;;

fun interactive_stop=
#ifdef INTERACTIVE_DEBUG
    _interactive_debug "interactive_stop";
#endif

    // jingle de fin
    let _interactive_sounds -> [gSoundStart gSoundStop] in
        _interactive_control_sound gSoundStop;
    set _interactive_sounds = [intDefaultStart intDefaultStop]; // on remet le son par default a la fin

    // chor de fin
    let _interactive_chors -> [gChorStart gChorStop] in
        _interactive_control_chor gChorStop;
    set _interactive_chors = [intchorDefaultStart intchorDefaultStop]; // on remet le chor par default a la fin

    // oreilles
    ears_go_to_ref_pos;

    // clean
    set interactive_cookie="";
    0;;

fun _interactive_continue_stop_cb unused=
    // finalise stopping itMode
    set interactive_app = nil;
    set interactive_status = 0;
    set chor_processing_status = 0; // skips all remaining commands anyway, so : not processing
    // DEBUG
#ifdef XMPP
    XmppSessionRequestResource "idle"; // Obligation de revenir en IDLE
#endif
    set streaming_status = 0; // On ne stream plus rien!
    run_set_state idleRun;
    0;;

fun interactive_send_btn btn=
    audiolib_wav_stop;
    ears_stop 0;
    let audiolib_wav_cur_played_bytes -> readBytes in ( // midi_play resets audiolib_wav_cur_played_bytes so we cache it
        // sound
        if (btn == BUTTON_CLIC) then (
            if (!strcmp _interactive_btn_1_snd "clonk") then midi_play MIDI_ABORT
            else if (!strcmp _interactive_btn_1_snd"chord") then midi_play MIDI_ACK
            else if (!strcmp _interactive_btn_1_snd "neutral") then midi_play MIDI_MINI_STOP;
            0
        ) else if (btn == BUTTON_DCLIC) then (
            if (!strcmp _interactive_btn_2_snd "clonk") then midi_play MIDI_ABORT
            else if (!strcmp _interactive_btn_2_snd "chord") then midi_play MIDI_ACK
            else if (!strcmp _interactive_btn_2_snd "neutral") then midi_play MIDI_MINI_STOP;
            0
        );
        // request instructions
        run_set_state interactiveReqWaitRun (http_request "GET" (interactive_url_btn interactive_app readBytes streaming_audio_cmd_index btn) nil #interactive_req_cb_http HTTP_NORMAL)
    );
    0;;

fun interactive_program_done=
    run_set_state interactiveReqWaitRun (http_request "GET" (interactive_url_done interactive_app) nil #interactive_req_cb_http HTTP_NORMAL);
    0;;


//*******************
// Ears turned
//*******************

type EarTouch=[num_ET refPos_ET moveDir_ET lastDV_ET lastMoveTime_ET turned_ET];;
var _interactive_ears_touch;;
const EAR_TOUCH_TIMEOUT=1000;;

fun interactive_reset_ears_touched=
    set _interactive_ears_touch=tabnew nil 2;
    for i=0;i<2 do set _interactive_ears_touch.i=[num_ET:i];
    for i=0;i<2 do let _interactive_ears_touch.i -> et in
    (
        set et.refPos_ET = -1;
        set et.moveDir_ET = -1;
        set et.lastDV_ET = -1;
        set et.lastMoveTime_ET = -1;
        set et.turned_ET = 0
    );
    0;;

fun _interactive_ear_delta_pos_normalized deltaPos=
    // between -EARS_HOLES>>1 and EARS_HOLES>>1
    if (deltaPos > EARS_HOLES>>1) then deltaPos - EARS_HOLES
    else if (deltaPos < -EARS_HOLES>>1) then deltaPos + EARS_HOLES
    else deltaPos;;

fun interactive_note_ear_touched eari curPos deltaPos=
    // right = 0, left = 1
    if (eari == 0 && (interactive_int_mask & MASK_EAR_RIGHT == 0)) || (eari == 1 && (interactive_int_mask & MASK_EAR_LEFT == 0)) then // active
    let _interactive_ears_touch.eari -> et in
    (
        set et.lastMoveTime_ET = time_ms;
        if (et.refPos_ET == -1) then (
            // first move : remember position and direction of movement
            set et.refPos_ET = curPos;
            if ((_interactive_ear_delta_pos_normalized deltaPos) > 0) then set et.moveDir_ET = 0 else set et.moveDir_ET = 1;
            set et.lastDV_ET = 0

        ) else if !et.turned_ET then
        // was already moving and not turned yet : test turned
        let (_interactive_ear_delta_pos_normalized (curPos - et.refPos_ET)) -> normalizedDV in (
            Secho "NDV="; Iecho normalizedDV; Secho ",";

            // Test 1 tour or stopped
            if (et.moveDir_ET == 0 && normalizedDV >= 0 && et.lastDV_ET < 0) then
                // if more than one tour forward : ok
                set et.turned_ET = 1
            else if (et.moveDir_ET == 1 && normalizedDV <= 0 && et.lastDV_ET > 0) then
                // if more than one tour backward : ok
                set et.turned_ET = 1;

            Secho "TOUCH="; Iecho et.turned_ET; Secho ",";

            set et.lastDV_ET = normalizedDV
        )
    );;

fun touchedP i=
    let _interactive_ears_touch.i -> et in (et.turned_ET || ((et.lastMoveTime_ET != -1) && ((/*Secho "DLAST="; Iecho */(time_ms - et.lastMoveTime_ET))> EAR_TOUCH_TIMEOUT)))
;;

fun interactive_send_ear_touched lefttouch righttouch=
    // right = 0, left = 1
    audiolib_wav_stop;
    ears_stop 0;
    let audiolib_wav_cur_played_bytes -> readBytes in  // midi_play resets audiolib_wav_cur_played_bytes so we cache it
    (
        if (lefttouch) then midi_play MIDI_PRECEDENT;
        if (righttouch) then midi_play MIDI_SUIVANT;
        run_set_state interactiveReqWaitRun (http_request "GET" (interactive_url_ear interactive_app readBytes streaming_audio_cmd_index righttouch lefttouch) nil #interactive_req_cb_http HTTP_NORMAL)
    );
    0;;

fun interactive_ear_process_touched_job=
    if (interactive_status) then
    let touchedP 0 -> lefttouch in
    let touchedP 1 -> righttouch in
    if (lefttouch || righttouch) then (
        interactive_send_ear_touched lefttouch righttouch;
        interactive_reset_ears_touched
    );
    JobRun;;

// Interactive request answer
fun interactive_req_cb_http http res=
#ifdef INTERACTIVE_DEBUG
    _interactive_debug "interactive_req_cb_http=";
#endif

    if (record_uploading) then (
        // mode upload / record
        set recorddata=nil;
        set recordreq=nil;
#ifdef INTERACTIVE_DEBUG
        _interactive_debug res;
#endif
        leds_set_all RGB_BLACK
    );

    if !record_recording then
    let http_get_content res -> ping_trame in
        trame_eval ping_trame;

    0;;

// Interactive request wait : timeout
fun runInteractiveReqWait http=
    // Waiting for interactive request
    // check timeout
    if (!record_uploading) then // upload record mode : timeout managed by record_upload_timeout_job
        if (http_inactive http)>STD_NET_TIMEOUT then
        (
#ifdef INTERACTIVE_DEBUG
            _interactive_debug "##timeout on runInteractiveReqWait";
#endif
            http_abort http;

            // error
            interactive_error
        );
    0;;


// ********************************
// interactive settings
// ********************************

/**
    Called when entering interactive state (command "IC" in a program)
*/
fun interactive_state_enter=
    set streaming_chor_enabled=1;
    set interactive_int_mask=0;
    set _interactive_btn_1_snd = "clonk";
    set _interactive_btn_2_snd = "chord";
    set record_enabled = 1;
    0;;

fun interactive_eval_IC_msg val=
    // parse val : ickey=icval
    let strstr val "=" 0 -> icpos in
    if icpos != nil && icpos > 0 && icpos < (strlen val) - 1 then
     // present, not first, not last
        let strsub val 0 icpos -> ickey in
        let strsub val icpos+1 ((strlen val) -1-icpos) -> icval in
        (
            if !strcmp ickey "snd.btn.1" then (
                // snd.btn.1                -> son du bouton en cas de pression courte.
                set _interactive_btn_1_snd = icval;
                0
            ) else if !strcmp ickey "snd.btn.2" then (
                // snd.btn.2                -> son du bouton en cas de double click.
                set _interactive_btn_2_snd = icval;
                0
            ) else if !strcmp ickey "snd.itmode" then (
                // snd.itmode                -> son debut et fin du mode interactif.
                if      !strcmp icval "default"     then set _interactive_sounds = [intDefaultStart intDefaultStop]
                else if !strcmp icval "none"        then set _interactive_sounds = [intNone intNone];
                0
            ) else if !strcmp ickey "chor.itmode" then (
                // chor.itmode                -> chor debut et fin du mode interactif.
                if      !strcmp icval "default"     then set _interactive_chors = [intchorDefaultStart intchorDefaultStop]
                else if !strcmp icval "none"        then set _interactive_chors = [intchorStartNone intchorStopNone];
                0
            ) else if !strcmp ickey "record.enabled" then (
                // record.enabled   -> activation de l'enregistrement
                if (!strcmp icval "true") then set record_enabled = 1
                else set record_enabled = 0;
                0
            ) else if !strcmp ickey "streaming.chor.enabled" then (
                // streaming.chor.enabled   -> chorÃ©graphie de streaming (oreilles)
                if (!strcmp icval "true") then set streaming_chor_enabled = 1
                else set streaming_chor_enabled = 0;
                0

            ) else if !strcmp ickey "int.mask" then (
                // int.mask -> masque d'interruption pour le mode interactif
                set interactive_int_mask = (atoi icval);
                0

            ) else if !strcmp ickey "cookie" then (
                // cookie -> cookie envoyÃ© au serveur
                set interactive_cookie = strcatlist "&c="::icval::nil;
                0
            ) else (
                0
            )
        );;

/**
 * Return interactive status as JSON
 */
fun interactive_json=
    strcatlist
        "{\n"::
            (json_int "state" interactive_status) :: ",\n" ::
            (json_str "app" interactive_app) :: "\n" ::
        "}" :: nil
;;

